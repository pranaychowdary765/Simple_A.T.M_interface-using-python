{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5370f223",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ENTER USER NAME: user1\n",
      "------------------\n",
      "******************\n",
      "PLEASE ENTER PIN: ········\n",
      "******************\n",
      "------------------\n",
      "-----------\n",
      "***********\n",
      "INVALID PIN\n",
      "***********\n",
      "-----------\n",
      "\n",
      "------------------\n",
      "******************\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_9284/506330276.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     32\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'------------------'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'******************'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m         \u001b[0mpin\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'PLEASE ENTER PIN: '\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'******************'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'------------------'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mgetpass\u001b[1;34m(self, prompt, stream)\u001b[0m\n\u001b[0;32m    986\u001b[0m                 \u001b[0mstacklevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    987\u001b[0m             )\n\u001b[1;32m--> 988\u001b[1;33m         return self._input_request(\n\u001b[0m\u001b[0;32m    989\u001b[0m             \u001b[0mprompt\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    990\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shell\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1049\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1050\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1051\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1052\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1053\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/python\n",
    "import getpass\n",
    "import string\n",
    "import os\n",
    "\n",
    "# creatinga lists of users, their PINs and bank statements\n",
    "\n",
    "users = ['u1', 'u2', 'u3']\n",
    "pins = ['1205', '1503', '0903']\n",
    "amounts = [1000, 2000, 3000]\n",
    "count = 0\n",
    "# while loop checks existance of the enterd username\n",
    "while True:\n",
    "\tuser = input('\\nENTER USER NAME: ')\n",
    "\tuser = user.lower()\n",
    "\tif user in users:\n",
    "\t\tif user == users[0]:\n",
    "\t\t\tn = 0\n",
    "\t\telif user == users[1]:\n",
    "\t\t\tn = 1\n",
    "\t\telse:\n",
    "\t\t\tn = 2\n",
    "\t\tbreak\n",
    "\telse:\n",
    "\t\tprint('----------------')\n",
    "\t\tprint('****************')\n",
    "\t\tprint('INVALID USERNAME')\n",
    "\t\tprint('****************')\n",
    "\t\tprint('----------------')\n",
    "\n",
    "# pin verification\n",
    "while count < 3:\n",
    "\tprint('------------------')\n",
    "\tprint('******************')\n",
    "\tpin = str(getpass.getpass('PLEASE ENTER PIN: '))\n",
    "\tprint('******************')\n",
    "\tprint('------------------')\n",
    "\tif pin.isdigit():\n",
    "\t\tif user == 'u1':\n",
    "\t\t\tif pin == pins[0]:\n",
    "\t\t\t\tbreak\n",
    "\t\t\telse:\n",
    "\t\t\t\tcount += 1\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('INVALID PIN')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint()\n",
    "\n",
    "\t\tif user == 'u2':\n",
    "\t\t\tif pin == pins[1]:\n",
    "\t\t\t\tbreak\n",
    "\t\t\telse:\n",
    "\t\t\t\tcount += 1\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('INVALID PIN')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint()\n",
    "\t\t\t\t\n",
    "\t\tif user == 'u3':\n",
    "\t\t\tif pin == pins[2]:\n",
    "\t\t\t\tbreak\n",
    "\t\t\telse:\n",
    "\t\t\t\tcount += 1\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('INVALID PIN')\n",
    "\t\t\t\tprint('***********')\n",
    "\t\t\t\tprint('-----------')\n",
    "\t\t\t\tprint()\n",
    "\telse:\n",
    "\t\tprint('------------------------')\n",
    "\t\tprint('************************')\n",
    "\t\tprint('PIN CONSISTS OF 4 DIGITS')\n",
    "\t\tprint('************************')\n",
    "\t\tprint('------------------------')\n",
    "\t\tcount += 1\n",
    "\t\n",
    "# in case of a valid pin- continuing, or exiting\n",
    "if count == 3:\n",
    "\tprint('-----------------------------------')\n",
    "\tprint('***********************************')\n",
    "\tprint('3 UNSUCCESFUL PIN ATTEMPTS, EXITING')\n",
    "\tprint('!!!!!YOUR CARD HAS BEEN LOCKED!!!!!')\n",
    "\tprint('***********************************')\n",
    "\tprint('-----------------------------------')\n",
    "\texit()\n",
    "\n",
    "print('-------------------------')\n",
    "print('*************************')\n",
    "print('LOGIN SUCCESFUL, CONTINUE')\n",
    "print('*************************')\n",
    "print('-------------------------')\n",
    "print()\n",
    "print('--------------------------')\n",
    "print('**************************')\t\n",
    "print(str.capitalize(users[n]), 'welcome to ATM')\n",
    "print('**************************')\n",
    "print('----------ATM SYSTEM-----------')\n",
    "\n",
    "# Main menu\n",
    "\n",
    "while True:\n",
    "\t#os.system('clear')\n",
    "\tprint('-------------------------------')\n",
    "\tprint('*******************************')\n",
    "\tresponse = input('SELECT FROM FOLLOWING OPTIONS: \\nStatement__(S) \\nWithdraw___(W) \\nLodgement__(L)  \\nChange PIN_(P)  \\nQuit_______(Q) \\n: ').lower()\n",
    "\tprint('*******************************')\n",
    "\tprint('-------------------------------')\n",
    "\tvalid_responses = ['s', 'w', 'l', 'p', 'q']\n",
    "\tresponse = response.lower()\n",
    "\tif response == 's':\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\tprint('*********************************************')\n",
    "\t\tprint(str.capitalize(users[n]), 'YOU HAVE ', amounts[n],'EURO ON YOUR ACCOUNT.')\n",
    "\t\tprint('*********************************************')\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\t\n",
    "\telif response == 'w':\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\tprint('*********************************************')\n",
    "\t\tcash_out = int(input('ENTER AMOUNT YOU WOULD LIKE TO WITHDRAW: '))\n",
    "\t\tprint('*********************************************')\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\tif cash_out%10 != 0:\n",
    "\t\t\tprint('------------------------------------------------------')\n",
    "\t\t\tprint('******************************************************')\n",
    "\t\t\tprint('AMOUNT YOU WANT TO WITHDRAW MUST TO MATCH 10 EURO NOTES')\n",
    "\t\t\tprint('******************************************************')\n",
    "\t\t\tprint('------------------------------------------------------')\n",
    "\t\telif cash_out > amounts[n]:\n",
    "\t\t\tprint('-----------------------------')\n",
    "\t\t\tprint('*****************************')\n",
    "\t\t\tprint('YOU HAVE INSUFFICIENT BALANCE')\n",
    "\t\t\tprint('*****************************')\n",
    "\t\t\tprint('-----------------------------')\n",
    "\t\telse:\n",
    "\t\t\tamounts[n] = amounts[n] - cash_out\n",
    "\t\t\tprint('-----------------------------------')\n",
    "\t\t\tprint('***********************************')\n",
    "\t\t\tprint('YOUR NEW BALANCE IS: ', amounts[n], 'EURO')\n",
    "\t\t\tprint('***********************************')\n",
    "\t\t\tprint('-----------------------------------')\n",
    "\t\t\t\n",
    "\telif response == 'l':\n",
    "\t\tprint()\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\tprint('*********************************************')\n",
    "\t\tcash_in = int(input('ENTER AMOUNT YOU WANT TO LODGE: '))\n",
    "\t\tprint('*********************************************')\n",
    "\t\tprint('---------------------------------------------')\n",
    "\t\tprint()\n",
    "\t\tif cash_in%10 != 0:\n",
    "\t\t\tprint('----------------------------------------------------')\n",
    "\t\t\tprint('****************************************************')\n",
    "\t\t\tprint('AMOUNT YOU WANT TO LODGE MUST TO MATCH 10 EURO NOTES')\n",
    "\t\t\tprint('****************************************************')\n",
    "\t\t\tprint('----------------------------------------------------')\n",
    "\t\telse:\n",
    "\t\t\tamounts[n] = amounts[n] + cash_in\n",
    "\t\t\tprint('----------------------------------------')\n",
    "\t\t\tprint('****************************************')\n",
    "\t\t\tprint('YOUR NEW BALANCE IS: ', amounts[n], 'EURO')\n",
    "\t\t\tprint('****************************************')\n",
    "\t\t\tprint('----------------------------------------')\n",
    "\telif response == 'p':\n",
    "\t\tprint('-----------------------------')\n",
    "\t\tprint('*****************************')\n",
    "\t\tnew_pin = str(getpass.getpass('ENTER A NEW PIN: '))\n",
    "\t\tprint('*****************************')\n",
    "\t\tprint('-----------------------------')\n",
    "\t\tif new_pin.isdigit() and new_pin != pins[n] and len(new_pin) == 4:\n",
    "\t\t\tprint('------------------')\n",
    "\t\t\tprint('******************')\n",
    "\t\t\tnew_ppin = str(getpass.getpass('CONFIRM NEW PIN: '))\n",
    "\t\t\tprint('*******************')\n",
    "\t\t\tprint('-------------------')\n",
    "\t\t\tif new_ppin != new_pin:\n",
    "\t\t\t\tprint('------------')\n",
    "\t\t\t\tprint('************')\n",
    "\t\t\t\tprint('PIN MISMATCH')\n",
    "\t\t\t\tprint('************')\n",
    "\t\t\t\tprint('------------')\n",
    "\t\t\telse:\n",
    "\t\t\t\tpins[n] = new_pin\n",
    "\t\t\t\tprint('NEW PIN SAVED')\n",
    "\t\telse:\n",
    "\t\t\tprint('-------------------------------------')\n",
    "\t\t\tprint('*************************************')\n",
    "\t\t\tprint('   NEW PIN MUST CONSIST OF 4 DIGITS \\nAND MUST BE DIFFERENT TO PREVIOUS PIN')\n",
    "\t\t\tprint('*************************************')\n",
    "\t\t\tprint('-------------------------------------')\n",
    "\telif response == 'q':\n",
    "\t\texit()\n",
    "\telse:\n",
    "\t\tprint('------------------')\n",
    "\t\tprint('******************')\n",
    "\t\tprint('RESPONSE NOT VALID')\n",
    "\t\tprint('******************')\n",
    "\t\tprint('------------------')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b125f3c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
